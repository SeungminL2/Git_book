.git 폴더
	- 버전 관리한 데이터  &  데이터를 올릴 원격 저장소의 주소 (Github에서 만든 저장소 url) 등  여러 필요한 정보들 저장됨
	>> 원격 저장소 주소 & 어디까지 작업했는지 저장

================================================================================

     [main] branch		-> 로컬 저장소 버전
					|->  우리가 커밋을 올리는 '줄기'의 이름
						|-> 따로 줄기를 생성하지 않으면 master라는 기본줄기에 커밋이 올려짐
[origin/main] branch	-> 원격 저장소 버전
					|->  협력자들도 볼 수 있음
					|->  '$ git remote add origin https://github.com/SeungminL2/iTshirt.git' 에서 origin이라고 했었음

================================================================================

파일 상태
	1) 추적 안됨	: 	새로 만든 파일.  한번도 커밋되지 않음
	2) 수정 없음	:	파일이 스테이지에 올라감.  다시 수정 가능함
	3) 수정함		:	파일을 수정했음
	4) 스테이지 됨	:	add를 통해 스테이지에 올라감 >> 스테이지에 있는 파일들을 커밋함 >> 2) 수정없음 상태가 됨

================================================================================

커밋 : 생성된 각 버전
	- 스냅샷 방식 : 변경된 파일 전체를 저장하는 방식
		- 기존 파일 + 변경된 파일
	- 커밋 메시지 
		- 어떤 것을 수정했는지 구체적으로 적어야 나중에 기억함

Push  : 스테이지에 있는 커밋을 원격저장소에 push
	- 다른 사람들도 함께 협업할 수 있게 됨

Branch : 한 파일에 대해 2명이 수정할 경우, 2갈래로 나뉘어서 커밋함
	- 포인터임
	- 하나의 Branch에는 한 사람만 작업하는 것이 바람직함
	- 규칙
		1) [main] branch에는 직접 커밋을 올리지 않는다
			|-> 동시에 작업하다가 꼬일 수 있음
		2) 기능개발하기 전에 [main] branch를 기준으로 새로운 branch를 만든다
		3) 이 branch 이름은 [feature/기능이름] 형식으로 하고, 한 명만 커밋을 올린다
		4) [feature/기능이름] branch에서 기능개발이 끝나면 [main] branch에 이를 합친다
			|-> 직접 [main] branch에 커밋하지 않고도, 각자가 작업한 모든 코드를 합칠 수 있음

Head 포인터 : branch 또는 커밋을 가리킴
	- Head포인터가 가리키는 커밋을 볼 수 있음 

Checkout : branch를 이동하는 명령
	- 새 branch checkout : 새 branch를 만드는 동시에 [Head]가 그 branch로 이동
	
================================================================================

Merge : branch와 branch를 합치기

	1) merge commit (병합 커밋)
		- ex) 커밋4 & 커밋5 합치기
			     	                      |--- 커밋3 <--- 커밋4 <---|
			커밋1 <--- 커밋2 <---| 				     	 |--- !! 병합 커밋 !!
						      |---------------- 커밋5 <---|

			>> 병합 커밋을 새로 만들어야함
			>> 커밋4를 가리키는 branch와 커밋5를 가리키는 branch 중 하나를 선택해서 병합커밋을 가리키도록 하면 됨

	2) fast-forward (빨리 감기)
		- ex)  커밋1 <--- 커밋2
			- 새로운 커밋을 만들 필요없음
			- 커밋1을 가리키는 branch와 커밋2를 가리키는 branch 둘다 커밋2를 가리키면 됨
				- 둘 중 한 branch는 삭제하면 됨

	3) conflict (충돌)
	
================================================================================

풀 리퀘스트 : 협력자에게 branch merge를 요청하는 메세지를 보내는 것
	- ex)  [main] branch에는 모두가 합의한 코드만 두자고 약속한 상황
		- 무작정 내 branch를 [main] branch에 merge하면 안됨
		- 풀 리퀘스트 필요함
	
	1) 새로운 branch 생성 >> 새로운 파일 생성 >> 커밋 >> Github에 들어가면

	2) 해당 branch 옆에  'Compare & pull request' 버튼 클릭
		|	|-> 네가 최근에 이 branch에 코드를 업데이트했으니 협력자에게 풀 리퀘스트를 보내려면 버튼 클릭하라는 뜻
		|
		|-> 베이스 branch와 비교 branch 설정
		|	|-> 베이스 branch 
		|	|	|-> 병합된 커밋이 들어갈 branch 선택
		|	|-> 비교 branch
		|		|-> 베이스 branch에 반영시키고 싶은 / 병합의 대상인 branch
		|
		|-> Able to merge 또는 Conflict가 표시됨
		|	|-> 충돌 없으면 Able to merge라고 뜸
		|	|-> 충돌 있으면 빨간색으로 Conflict라고 뜸
		|
		|-> 오른쪽에 Reviewers에서 협력자 지정가능

	3) 협력자들이 해당 풀 리퀘스트에 대해 검토할 수 있음
		|	|-> [1]  풀 리퀘스트를 수락할 수 있음
		|	|-> [2]  풀 리퀘스트를 수정할 수 있음
		|	|-> [3]  풀 리퀘스트를 병합할 수 있음
		|
		|-> 'Merge pull request' 버튼 클릭  >>  'Confirm Merge' 버튼 클릭
			|-> [3]에 해당함	
			
	4) 소스트리로 이동  >>  [origin/main] branch가 방금 만든 병합커밋이 아닌 옛 커밋을 가리키고 있음
		|-> 위에서 '패치' 클릭하면  병합 커밋을 가리킴
			|-> 소스트리에서 10분마다 자동으로 패치함

	5) main branch 더블클릭하여 checkout
	
	6) 위에서 'pull' 클릭
		|-> [main] branch가 [origin/main]과 동일한 커밋 가리킴

================================================================================

Release : 프로그램 출시
	
	- [main] branch를 서버에 올려서 사용자들이 사용할 수 있도록 배포
		|-> 현재 코드 상태를 버전 v1.0.0이라고 기록
	
	- Tag : 특정 커밋 가리키는 포인터

	1) 소스트리 위에서 '태그' 클릭
		|-> v1.0.0 입력  >> '태그추가' 클릭

	2) 위에서 'push' 클릭
		|-> '모든 태그 푸시' 체크표시  >>  'Push' 클릭

	3) Github에 들어가보면 오른쪽 Release에 '1 Tags'라고 뜸

================================================================================

Fork : 남의 원격 저장소를 내 계정의 원격 저장소로 복사해오기
	|-> 원격 저장소에 커밋을 직접 push할 수 있는 사람은 해당 원격 저장소를 만든 본인 뿐
	|	|-> 다른 사람이 해당 원격 저장소에 push하려면 협력자로 등록되어있어야함
	|		|-> Github 원격저장소  >>  Settings  >>  Collaborators  >>  Add people
	|			
	|	- 협력자 많아질수록 원본저장소 관리 어려워짐 
	|		|	|-> 협력자가 직접 push할 수 있기 때문
	|		|
	|		|->  !! 풀 리퀘스트 !!
	|			|-> 협력자는 자신의 계정에 해당 원격저장소를 fork해서 새로운 원격저장소 생성
	|			|-> 이곳에 커밋을 올린 후, 원본저장소의 소유자에게 병합 요청
	|
	|-> branch를 포함한 원본저장소의 모든 커밋 이력을 통째로 복사
	
		--- branch 
		|	|->  하나의 원본저장소에서 분기를 나눔
		|	|->  커밋 이력을 편하게 볼 수 있음
		|	|->  다수의 사용자가 다수의 branch를 만들면 관리 힘들어짐
		|
		--- fork
			|->  여러 원격저장소를 만들어 분기를 나눔
			|->  원본저장소에 끼치는 영향없음
			| 	 |-> 마음껏 코드 수정 가능
			|->  원본저장소의 이력을 보려면 따로 주소 추가해야함
